#include <stdio.h>
#define INF 99999
#define MAX_N 20 // Maximum value for N
void floydWarshall(int dist[MAX_N][MAX_N],int n){
	int i,j,k;
	for(k=0;k<n;k++){
		for(i=0;i<n;i++){
			for(j=0;j<n;j++){
				if(dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j]){
					dist[i][j]=dist[i][k]+dist[k][j];
				}
			}
		}
	}
}

void printSolution(int dist[MAX_N][MAX_N],int n){
	printf("The following matrix shows the shortest distances between all pairs of the vertices.\n");
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if(dist[i][j]==INF)
				printf("%5s","INF");
			else
				printf("%5d",dist[i][j]);
		}
	printf("\n");
	}
}

int main(){
	int n,e;
	int dist[MAX_N][MAX_N];
	printf("Enter the number of vertices : ");
	scanf("%d",&n);
	printf("Enter the number of edges : ");
	scanf("%d",&e);

	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if(i==j)
				dist[i][j]=0;
			else
				dist[i][j]=INF;
		}
	}

	for(int i=0;i<e;i++){
		int u,v,w;
		printf("Enter source : ");
		scanf("%d",&u);
		printf("Enter destination : ");
		scanf("%d",&v);
		printf("Enter weight : ");
		scanf("%d",&w);
		dist[u-1][v-1]=w;
	}
	floydWarshall(dist,n);
	printSolution(dist,n);
	return 0;
	}
